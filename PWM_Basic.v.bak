module PWM_Basic #(parameter R = 8) (
input clk, rst_n,
input [R-1 : 0] duty,
output pwn_out
	);
reg [R-1 : 0] count = 0;

always @(posedge clk , negedge rst_n) begin
	if (!rst_n) begin
		count <= 0;
		
	end
	else  begin
		count <= count + 1 ;
	end
end

assign pwn_out = (count < duty)? 1 : 0 ;

endmodule

module PWM_Basic_tb ();
parameter R = 8;
reg clk, rst_n;
reg [R-1 : 0] duty;
wire pwn_out;

PWM_Basic #(.R(R)) dut (.clk(clk), .rst_n(rst_n), .duty(duty), .pwn_out(pwn_out));

always #5 clk = ~clk;

initial begin
rst_n = 0;
#2;
rst_n = 1;

duty = 0.25 * (2**R);
# (4*(2**R));

duty = 0.50 * (2**R);
# (4*(2**R));

duty = 0.75 * (2**R);
# (4*(2**R));
$stop
end


endmodule